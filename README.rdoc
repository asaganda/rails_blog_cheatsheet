How to build a blog in rails guide/cheatsheet 
<!-- to read comments clearly make sure text in lower right reads “markdown”-->

open terminal
	cd into where your new blog should go
	type..
		<!-- this is the name of the new blog/project -->
		rails new project-name
		<!-- this creates all the files for the blog/project -->

open sublime
	open newly created project
	make sure all the files are there

checking
	open terminal
	type..
		rails s
	open browser
	should see the rails guide

open terminal
	type..
		<!-- this initializes empty repository -->
		git init
		<!-- make sure all the files are untracked (in red) -->
		git status
		<!-- add files to be tracked -->
		git add .
		<!-- make sure all the files are now tracked (in green) -->
		git status
		<!-- make initial commit -->
		git commit -m "initial commit"

NOTE:
	Think about the new blog/project for a minute, what do you want to able to do?
		create a user (sign-up)
		login/logout (sign-in/sign-out)
		create posts
		edit/delete posts
		add comments
		admin user ability to delete comments (if spam or unwanted attention)

NOTE:
	Let's start with posts

open terminal
	type..
		<!-- this creates the view directory but not the view files -->
		<!-- you can also type rails g resources posts alternatively as well that will provide a bit more for blog/project...checkout guides.rubyonrails.org for reference --> 
		rails g controller posts

NOTE: 
	Now let's put in some routes

open sublime
	open config > routes.rb
	type..
		resources :posts
		<!-- if you want the posts to be in the root of your blog -->
		<!-- where, root = where it is going... posts = controller... index = action -->
		root "posts#index"

NOTE:
Now you know the PostsController needs the index action

open PostsController
	<!-- defining index action -->
	type..
		def index
		end

NOTE:
<!-- since we have generated a controller vs not using the resources we don't have a view > posts > index.html.erb file ...resources does this for you also. -->
<!-- Now we have to create that file manually. -->

open app > views > posts
	open blank file
	<!-- make sure it saves to views > posts -->
	save as index.html.erb
	type..
		<!-- filler text for checking -->
		this is posts index file
	open browser and refresh to check for text on screen

NOTE:
Next we want the ability to create new posts

open PostsController
	<!-- We're going to add a new method(or action), named "new" -->
	<!-- one of the 7 RESTful actions -->
	type..
		def new
		end

open browser
	<!-- checking... -->
	open /posts/new
	<!-- notice we don't have a template, so let's create one -->

create a view > posts new.html.erb file open new.html.erb
	create new post form
		<!-- check posts new.html.erb for code -->

open terminal
<!-- Now we have a new post form but not a model to go with it to save our data -->
	type..
		<!-- creates migration and model with info given -->
		rails g model Post title:string body:text
		<!-- check files after to confirm -->
		<!-- migrate database -->
		rake db:migrate

open PostsController
	<!-- in order to create new posts have to define create method -->
	type..
		def create
		<!-- check code -->
		end
		<!-- add private params and check code -->
	[private method created for the post_params allowing title/body for the post]

create posts show.html.erb file
	<!-- this is where the post lives -->

open show.html.erb
	<!-- check code -->

open PostController
	<!-- define show -->
	type..
		def show
		<!-- check code -->
		end

NOTE:
<!-- checking... -->
<!-- open browser and create post any errors review the code -->

NOTE:
<!-- Now we want to list all of the posts at the root of the application -->

edit index action in PostController
<!-- check code -->

edit index.html.erb file
<!-- check code -->
<!-- checking... -->
<!-- create multiple posts and make sure they display with the info you want -->

open terminal
<!-- If you would like to push to github, create repository now, add remote and push -->
git commit the changes

Adding styling

Starting a new branch

open terminal
	type..
		git branch styling
		git checkout styling

NOTE:
<!-- Currently on styling branch -->

open views > layouts > application.html.erb
	edit application.html.erb
		<!-- creating a side bar -->
		<!-- check code -->

SIDE NOTE:
images can be placed in app > assets > images

styling

open app > assets > stylesheets > application.css
<!-- rename the file name to application.css.scss (.scss extension) so that we can use sass -->

We're going to use normalize. It resets every browser so you're starting
from the same place so each browser doesn't use a different default styling.
reference: http://necolas.github.io/normalize.css/3.0.1/normalize.css
copy/paste the code into the new stylesheet
Effect: it changes the fonts a bit, removes the margin

create a new stylesheet (it's going to be a partial, i think the file naming 
convention for partials starts with underscore "_") and paste the normalize code in.
	within application.css.scss, we're going to import it
		<!-- @import 'normalize'; -->

He goes on to add css but i just copied/pasted from his github what he had in his application.css.scss to my own also

We still have the posts but they're hidden behind the sidebar at the moment in which this was written out...because we haven't added the wrapper to the application.html.erb.

go to application.html.erb
we want to add a sign-in button so a user can sign-in
	type..
		check code in application.html.erb file for "Admin Login"
		<!-- this puts the un-clickable link at the bottom of the sidebar -->

He uses Google fonts
	we add the line of code:
		<%= stylesheet_link_tag 'application', 'http://fonts.googleapis.com/css?family=Raleway:400,700' %> to our application.html.erb for the specific font

Add main_content area in the sidebar
	<!-- check code in application.html.erb with id tag "main_content" -->
	I put the <%= yield %> within the main_content div so that the list of posts (index) and new post form would show rather than being behind the sidebar

Adding a flash message for when the user sign-in/sign-out/creating a new post
	<!-- look at application.html.erb for code -->

We wrap the new post form in a "page_wrapper" div
	<!-- check the code in the new.html.erb file -->

We wrap the show.html.erb in a "post_content" div
	<!-- check the code in the show.html.erb file -->

Commit and merge what we just did--styling and structure
	git status
	<!-- untracked modified files -->
	git add .
	git commit -m "Styling and Structure"

Merging styling branch into master so that styling/structure updates are in the master branch 
	Switch to the master branch
		<!-- we make sure that no files are untracked/not committed/etc so our directory is clean -->
		git checkout master
		<!-- switched into master branch -->
		git merge styling
		<!-- now master branch has everything styling branch has, both branches have same information but we can go back and work on master again -->
			<!-- merging the more up to date branch (styling) into the branch that needs updating (master) via this command...this can also be done on github site by comparing code and getting green notice that the two branches are able to merge with no merge conflicts -->

At the moment, a user can technically create a new post without typing anything in the box and the app would save it, we don't want to be able to do that. We have no validations in place that will throw errors if for ex: we don't have a post or if we're missing the body text. We're going to fix that.

open file app < models < post.rb

edit to add validations
	add some validations to our model regarding the post
	<!-- check code -->

open file app < controllers < posts_controller.rb

edit new method and create method
	<!-- check code -->

we want to be able to add error messages to our posts and see them so we want to add this to new.html.erb file

edit new.html.erb file
  <!-- check code within the form with div id errors -->

Our validations work now

Now we want the ability to edit or delete posts

Let's start with the edit
open PostsController file
  <!-- check code for the edit and update methods -->

now we need an edit view form. we will be using the same form as the new. we will go ahead and convert the new one as well as the edit to a partial

create 2 new files
  <!-- named edit.html.erb -->
  <!-- another named (a partial) _form.html.erb -->
    we are going to copy the form from new.html.erb and into _form.html.erb replace it with <%= render 'form' %> which will grab the partial for us
    <!-- check codes for both files -->

NOTE: rails is smart enough to know what form we are using this for, referencing _form.html.erb whether it is the edit or the new form

NOTE: essentially our form is in only one file however we are "rendering" it elsewhere without having to write it again for convenience. a clear example of DRY (Don't Repeat Yourself), one of the 2 theories of Rails

    we copy the form within new.html.erb and paste it into edit.html.erb
<!--       check code to see what is different about the edit form versus the new
 -->

open show.html.erb
add the ability to edit a post
  <!-- check code -->

sanity check: go to site and check

No we want to add the ability to delete a post 
  we have create the method in the posts_controller.rb file
  <!-- check code -->
  we need to add a link to delete also--show.html.erb
  <!-- check code -->

Now we are able to edit an delete posts

He wants to redirect back to the root path rather than the posts path listing all the posts

sanity check: delete working and routing back to the root

Next, we want the ability to add comments to the posts
  We need to create a new model to hold the comments
  open terminal
    <!-- comment belongs to a post so that's why we have the reference -->
    rails g model Comment name:string body:text post:references
    this creates a comment model in the app > models directory with the relationship between comment and post set up
  if we look at db/migrate, there is a create_comments.rb migration file with the database table column set up also after which we run the migration file:
    <!-- rake db:migrate -->
  we need to add an association to the posts
    under posts.rb
      <!-- check code -->
  next we need to add routes for comments in the routes.rb file
    <!-- nested routes -->
NOTE: 
running rake routes in the terminal will show all the routes/paths we have made/have access to
  we see /posts/.../comments because we have the comments route nested with posts

Now we need to generate a comment controller
  open terminal
    rails g controller Comments

	In order to create a comment, we need to have a create action inside of the controller
		check code

NOTE: Next we're going to create a few partials and then import them into the post show page

create in views > comments the new partial pages
 	_form.html.erb
	_comment.html.erb

open comments > _form.html.erb
	type..
	<!-- check code -->

open comments > _comment.html.erb
	type..
	<!-- check code -->

open posts > show.html.erb
 	type..
 	<!-- check code under post body where comments starts -->

Now we can add comments to posts
A ton of spam if we can't delete comments

Need to add the ability of a user to delete a comment

open comments controller
	type..
	<!-- check code -->
	
open _comment.html.erb
	type..
	<!-- check code below the comment div -->

Now we can delete comments of a particular post
Next: deleting posts and the comments attached with it

open post model, post.rb
	type..
	<!-- check code after the comma of the line has_many -->
